# workflow의 이름
name: Deploy to Amazon EC2 / Spring Boot with Gradle

# 환경 변수 $변수명으로 사용
env:
  PROJECT_NAME: hello-infra
  BUCKET_NAME: hello-infra-bucket
  CODE_DEPLOY_APP: hello-infra-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP: hello-infra-deployment-group

# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
on:
  push:
    branches:
      - main

# workflow는 한개 이상의 job을 가지며, 각 job은 여러 step에 따라 단계를 나눌 수 있습니다.
jobs:
  build:
    name: CI/CD
    # 해당 jobs에서 아래의 steps들이 어떠한 환경에서 실행될 것인지를 지정합니다.
    runs-on: ubuntu-latest

    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃합니다.
      - uses: actions/checkout@v2

      # Gradle 구동을 위한 JDK 17을 세팅합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      # Caching dependencies (디펜던시를 캐싱하여 반복적인 빌드 작업의 시간을 단축할 수 있다.)
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      # Build
      - name: Build with Gradle
        run: ./gradlew build

      # build한 후 프로젝트를 압축한다.
      - name: Make zip file
        run: zip -r ./$PROJECT_NAME.zip .
        shell: bash

      # aws 인증서비스
      # github repository에서 Setting에서 사용할 암호화된 변수
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_DEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      # Upload to S3 storage
      - name: Upload to S3
        run: aws s3 cp $PROJECT_NAME.zip s3://$BUCKET_NAME/deploy/$PROJECT_NAME.zip --region ap-northeast-2

      # CodeDeploy에게 배포 명령을 내린다.
      - name: Code Deploy
        run: >
          aws deploy create-deployment --application-name $CODE_DEPLOY_APP
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip
